# -*- coding: utf-8 -*-
"""Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HiWkCyBCPNu9b82yHwKzRnHI336s2dlI

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** [Yuni Sarah Siregar]
- **Email:** [m281b4kx4570@bangkit.academy]
- **ID Dicoding:** [Input Username]

## Menentukan Pertanyaan Bisnis

- Bagaimana peforma penyewaan sepeda pada hari kerja?
- Bagaimana peforma penyewaan sepeda pada hari libur?
- Bagaimana peforma penyewaan sepeda berdasrkan musim?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""library yang dipakai pada analisis ini adalah numpy, pandas, matpolib dan seaborn

## Data Wrangling

### Gathering Data

GATHERING DATA DAY
"""

day_df = pd.read_csv("https://raw.githubusercontent.com/yuna1i/DataBike/refs/heads/main/day.csv")
day_df.head()

"""**Insight:**
- Hari kerja juga mempengaruhi, di mana pada hari libur (workingday=0), seperti 1 Januari, penyewaan oleh pengguna kasual mencapai 331, namun penyewaan oleh pengguna terdaftar lebih sedikit.

GATHERING DATA HOUR
"""

hour_df = pd.read_csv("https://raw.githubusercontent.com/yuna1i/DataBike/refs/heads/main/hour.csv")
hour_df.head()

"""**insight** : Berdasarkan data penyewaan sepeda pada tanggal 1 Januari 2011, terlihat bahwa jumlah penyewaan sangat rendah di jam-jam pagi hari, terutama antara pukul 00:00 hingga 04:00, dengan penyewaan hanya berkisar antara 1 hingga 40. Pada pukul 00:00, total penyewaan tercatat hanya 16, dan tren ini berlanjut sepanjang pagi. Pengguna terdaftar mendominasi penyewaan, dengan jumlah yang secara konsisten lebih tinggi daripada pengguna kasual.

### Assessing Data

ASSESSING DATA DAY
"""

day_df.info()

"""**Insight:**
- bisa dilihat dari info bahwa format pada dteday bukan lah object yang nantinya bisa diganti dengan datetime
- tidak terdapat missing value


"""

print("Jumlah duplikasi: ",day_df.duplicated().sum())
day_df.describe()

"""ASSESSING DATA HOUR"""

hour_df.info()

"""**Insight:**
- bisa dilihat dari info bahwa format pada dteday bukan lah object yang nantinya bisa diganti dengan datetime
- tidak terdapat missing value
"""

print("Jumlah duplikasi: ",hour_df.duplicated().sum())
hour_df.describe()

"""### Cleaning Data

Membersihkan tabel day

memperbaiki tipe data
"""

datetime_columns = ["dteday"]

for column in datetime_columns:
  day_df[column] = pd.to_datetime(day_df[column])

day_df.info()

"""**Insight:**
Tipe data pada kolom dtday sudah berubah menjadi tipe datetime

Membersihkan tabel Hour

memperbaiki tipe data
"""

datetime_columns = ["dteday"]

for column in datetime_columns:
  hour_df[column] = pd.to_datetime(hour_df[column])

hour_df.info()

"""Insight : Tipe data dtday sudah berubah dari object ke datetime

## Exploratory Data Analysis (EDA)

##### Explore tabel day
"""

day_df.sample(5)

day_df.describe(include="all")

day_df.instant.is_unique

"""**Insight** :
- Data pada tabel day sudah uniq atau tidak ada duplikat
"""

day_df.instant.duplicated

day_df.duplicated(keep='first')

day_df.groupby(by="season").agg({
    "instant": "nunique",
    "cnt": "sum",
})

day_df.groupby(by="holiday").agg({
    "instant": "nunique",
    "cnt": "sum",
})

day_df.groupby(by="weekday").agg({
    "instant": "nunique",
    "cnt": "sum"
})

"""**Explore tabel hour**



"""

hour_df.sample(5)

hour_df.describe(include="all")

hour_df.instant.is_unique

hour_df.duplicated(keep='first')

all_df = pd.merge(
    left=day_df,
    right=hour_df,
    how="left",
    left_on="instant",
    right_on="instant"
)
all_df.head()

all_df.groupby(by="season_x").agg({
    "instant": "nunique",
    "cnt_y": "sum"
}).sort_values(by="cnt_y", ascending=False)

all_df.sample(5)

"""## Visualization & Explanatory Analysis

**Pertanyaan 1** :
-Bagaimana peforma penyewaan sepeda pada hari kerja ?
"""

byweekday_df = all_df.groupby(by="weekday_x").instant.nunique().reset_index()
byweekday_df.rename(columns={
    "instant": "cnt_y"
}, inplace=True)
byweekday_df

colors = ["#1f77b4", "#1f77b4", "#1f77b4", "#1f77b4", "#1f77b4", "#1f77b4"]  # Daftar warna
sns.barplot(
    y="cnt_y",
    x="weekday_x",
    data=byweekday_df.sort_values(by="cnt_y", ascending=False),
    palette=colors
)
plt.title("Number of Customer by weekday", loc="center", fontsize=15)
plt.ylabel(None)
plt.show()

"""**insight :** Berdasarkan data penyewaan sepeda pada hari kerja, tercatat bahwa jumlah penyewaan relatif stabil sepanjang minggu, dengan sedikit variasi antar hari. Rata-rata penyewaan berkisar antara 104 hingga 105 penyewaan per hari kerja, yang menunjukkan konsistensi dalam permintaan. Hal ini mungkin mengindikasikan bahwa sepeda digunakan secara rutin sebagai alat transportasi harian oleh pengguna selama hari kerja.

**Pertanyaan 2** : -Bagaimana peforma penyewaan sepeda pada hari libur ?
"""

byholiday_df = all_df.groupby(by="holiday_x").instant.nunique().reset_index()
byholiday_df.rename(columns={
    "instant": "cnt_y"
}, inplace=True)
byholiday_df

colors = ["#1f77b4", "#1f77b4" ]  # Daftar warna
sns.barplot(
    y="cnt_y",
    x="holiday_x",
    data=byholiday_df.sort_values(by="cnt_y", ascending=False),
    palette=colors
)
plt.title("Number of Customer by Holiday", loc="center", fontsize=15)
plt.ylabel(None)
plt.show()

"""**Insight :** Data penyewaan sepeda menunjukkan perbedaan signifikan antara hari libur dan hari biasa. Pada hari libur, tercatat hanya 21 penyewaan, sedangkan pada hari non-libur (hari kerja) jumlah penyewaan jauh lebih tinggi, mencapai 710. Hal ini menunjukkan bahwa sepeda lebih banyak digunakan pada hari-hari biasa, mungkin sebagai sarana transportasi rutin, sementara permintaan menurun drastis saat liburan.

**Pertanyaan 3** :
-Bagaimana peforma penyewaan sepeda berdasarkan musim ?
"""

byseason_df = all_df.groupby(by="season_x").instant.nunique().reset_index()
byseason_df.rename(columns={
    "instant": "cnt_y"
}, inplace=True)
byseason_df

colors = ["#1f77b4", "#1f77b4", "#2ca02c", "#1f77b4"]  # Daftar warna
sns.barplot(
    y="cnt_y",
    x="season_x",
    data=byseason_df.sort_values(by="cnt_y", ascending=False),
    palette=colors
)
plt.title("Number of Customer by Season", loc="center", fontsize=15)
plt.ylabel(None)
plt.show()

"""**Insight :**
Penyewaan sepeda tertinggi terjadi pada Musim 3 dengan 188 penyewaan, diikuti Musim 2 sebanyak 184 penyewaan. Musim 4 memiliki penyewaan terendah, yaitu 178, kemungkinan karena kondisi yang kurang ideal untuk bersepeda. Selisih jumlah penyewaan antara musim tertinggi dan terendah relatif kecil, menunjukkan bahwa penyewaan sepeda cukup stabil sepanjang tahun tanpa fluktuasi signifikan antar musim.

## Analisis Lanjutan (Opsional)
"""

rfm_df = all_df.groupby(by="instant", as_index=False).agg({
    "dteday_x": "max",  # mengambil tanggal order terakhir
    "instant": "nunique",
    "cnt_y": "sum"
})

# Ubah nama kolom
rfm_df.columns = ["dteday_x", "frecuency", "monetary"]
rfm_df.reset_index(drop=False, inplace=True)
rfm_df.rename(columns={'index': 'instant'}, inplace=True)


rfm_df.head()

# menghitung kapan terakhir pelanggan melakukan transaksi (hari)
rfm_df["dteday_x"] = rfm_df["dteday_x"].dt.date
recent_date = all_df["dteday_x"].dt.date.max()
rfm_df["recency"] = rfm_df["dteday_x"].apply(lambda x: (recent_date - x).days)
rfm_df.head()

rfm_df.drop("dteday_x", axis=1, inplace=True)
rfm_df.head()

rfm_df.describe()

rfm_df.sort_values(by="recency", ascending=True).head(5)

rfm_df.sort_values(by="frecuency", ascending=False).head(5)

fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 6))

colors = ["#72BCD4", "#72BCD4", "#72BCD4", "#72BCD4", "#72BCD4"]

sns.barplot(y="recency", x="instant", data=rfm_df.sort_values(by="recency", ascending=True).head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("By Recency (days)", loc="center", fontsize=18)
ax[0].tick_params(axis ='x', labelsize=15)

sns.barplot(y="frecuency", x="instant", data=rfm_df.sort_values(by="frecuency", ascending=False).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].set_title("By Frequency", loc="center", fontsize=18)
ax[1].tick_params(axis='x', labelsize=15)

sns.barplot(y="monetary", x="instant", data=rfm_df.sort_values(by="monetary", ascending=False).head(5), palette=colors, ax=ax[2])
ax[2].set_ylabel(None)
ax[2].set_xlabel(None)
ax[2].set_title("By Monetary", loc="center", fontsize=18)
ax[2].tick_params(axis='x', labelsize=15)

plt.suptitle("Best Customer Based on RFM Parameters (customer_id)", fontsize=20)
plt.show()

print(rfm_df.columns)

rfm_df['r_rank'] = rfm_df['recency'].rank(ascending=False)
rfm_df['f_rank'] = rfm_df['frecuency'].rank(ascending=True)
rfm_df['m_rank'] = rfm_df['monetary'].rank(ascending=True)

rfm_df.head()

# normalizing the rank of the customers
rfm_df['r_rank_norm'] = (rfm_df['r_rank']/rfm_df['r_rank'].max())*100
rfm_df['f_rank_norm'] = (rfm_df['f_rank']/rfm_df['f_rank'].max())*100
rfm_df['m_rank_norm'] = (rfm_df['m_rank']/rfm_df['m_rank'].max())*100

rfm_df.drop(columns=['r_rank', 'f_rank', 'm_rank'], inplace=True)

rfm_df.head()

rfm_df['RFM_score'] = 0.15*rfm_df['r_rank_norm']+0.28 * \
    rfm_df['f_rank_norm']+0.57*rfm_df['m_rank_norm']
rfm_df['RFM_score'] *= 0.05
rfm_df = rfm_df.round(2)
rfm_df[['instant', 'RFM_score']].head(7)

rfm_df["customer_segment"] = np.where(
    rfm_df['RFM_score'] > 4.5, "Top customers", (np.where(
        rfm_df['RFM_score'] > 4, "High value customer",(np.where(
            rfm_df['RFM_score'] > 3, "Medium value customer", np.where(
                rfm_df['RFM_score'] > 1.6, 'Low value customers', 'lost customers'))))))

rfm_df[['instant', 'RFM_score', 'customer_segment']].head(20)

customer_segment_df = rfm_df.groupby(by="customer_segment", as_index=False).instant.nunique()
customer_segment_df

customer_segment_df['customer_segment'] = pd.Categorical(customer_segment_df['customer_segment'], [
    "lost customers", "Low value customers", "Medium value customer",
    "High value customer", "Top customers"
])

plt.figure(figsize=(10, 5))
colors_ = ["#72BCD4", "#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(
    x="instant",
    y="customer_segment",
    data=customer_segment_df.sort_values(by="customer_segment", ascending=False),
    palette=colors_
)
plt.title("Number of Customer for Each Segment", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)
plt.show()

"""## Conclusion

- Segmentasi Pelanggan: Analisis menunjukkan adanya lima segmen pelanggan berdasarkan nilai penggunaan layanan sepeda, dari yang sangat berharga hingga yang hilang. Ini mencerminkan variasi dalam keterlibatan dan kontribusi pelanggan terhadap pendapatan.

- Pola Penyewaan Berdasarkan Hari: Data menunjukkan bahwa penyewaan sepeda pada hari libur jauh lebih tinggi dibandingkan hari kerja, dengan 710 penyewaan saat hari libur. Ini menunjukkan ketertarikan yang lebih besar terhadap penyewaan sepeda saat waktu luang.

- Musim dan Penyewaan: Penyewaan sepeda menunjukkan pola yang stabil sepanjang musim, dengan sedikit fluktuasi. Hal ini menunjukkan bahwa musim tidak memiliki dampak yang signifikan terhadap tingkat penyewaan, tetapi tetap penting untuk menjaga ketersediaan dan kualitas layanan.
"""

all_df.to_csv("all_data.csv", index=False)